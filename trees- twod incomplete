from __future__ import annotations
from typing import Optional, List, Tuple, Dict


class OutOfBoundsError(Exception):
    pass


class Tree:
    def __contains__(self, name: str) -> bool:
        """ Return True if a player named <name> is stored in this tree.

        Runtime: O(n)
        """
        raise NotImplementedError

    def contains_point(self, point: Tuple[int, int]) -> bool:
        """ Return True if a player at location <point> is stored in this tree.

        Runtime: O(log(n))
        """
        raise NotImplementedError

    def insert(self, name: str, point: Tuple[int, int]) -> None:
        """Insert a player named <name> into this tree at point <point>.

        Raise an OutOfBoundsError if <point> is out of bounds.

        Runtime: O(log(n))
        """

    def remove(self, name: str) -> None:
        """ Remove information about a player named <name> from this tree.

        Runtime: O(n)
        """
        raise NotImplementedError

    def remove_point(self, point: Tuple[int, int]) -> None:
        """ Remove information about a player at point <point> from this tree.

        Runtime: O(log(n))
        """
        raise NotImplementedError

    def move(self, name: str, direction: str, steps: int) -> Optional[
        Tuple[int, int]]:
        """ Return the new location of the player named <name> after moving it
        in the given <direction> by <steps> steps.

        Raise an OutOfBoundsError if this would move the player named
        <name> out of bounds (before moving the player).

        Runtime: O(n)

        === precondition ===
        direction in ['N', 'S', 'E', 'W']
        """
        raise NotImplementedError

    def move_point(self, point: Tuple[int, int], direction: str, steps: int) ->\
            Optional[Tuple[int, int]]:
        """ Return the new location of the player at point <point> after moving it
        in the given <direction> by <steps> steps.

        Raise an OutOfBoundsError if this would move the player at point
        <point> out of bounds (before moving the player).

        Moving a point may require the tree to be reorganized. This method should do
        the minimum amount of tree reorganization possible to move the given point properly.

        Runtime: O(log(n))

        === precondition ===
        direction in ['N', 'S', 'E', 'W']

        """
        raise NotImplementedError

    def names_in_range(self, point: Tuple[int, int], direction: str,
                       distance: int) -> List[str]:
        """ Return a list of names of players whose location is in the <direction>
        relative to <point> and whose location is within <distance> along both the x and y axis.

        For example: names_in_range((100, 100), 'SE', 10) should return the names of all
        the players south east of (100, 100) and within 10 steps in either direction.
        In other words, find all players whose location is in the box with corners at:
        (100, 100) (110, 100) (100, 110) (110, 110)

        Runtime: faster than O(n) when distance is small

        === precondition ===
        direction in ['NE', 'SE', 'NE', 'SW']
        """
        raise NotImplementedError

    def size(self) -> int:
        """ Return the number of nodes in <self>

        Runtime: O(n)
        """
        raise NotImplementedError

    def height(self) -> int:
        """ Return the height of <self>

        Runtime: O(n)
        """
        raise NotImplementedError

    def depth(self, tree: Tree) -> Optional[int]:
        """ Return the depth of the subtree <tree> relative to <self>.
        Return None if <tree> is not a descendant of <self>

        Runtime: O(log(n))
        """

    def is_leaf(self) -> bool:
        """ Return True if <self> has no children

        Runtime: O(1)
        """
        raise NotImplementedError

    def is_empty(self) -> bool:
        """ Return True if <self> does not store any information about the location
        of any players.

        Runtime: O(1)
        """
        raise NotImplementedError


class QuadTree(Tree):
    """ A QuadTree instance.
    === Representation Invariants ===
    - only leaves can have non-None _name attributes
    - every leaf must have a non-None _name unless it has no parents
    - only leaves can have non-None _point attributes
    - every leaf node must have a non-None _point attribute unless it also has
    no parents
    - every non-None _point attribute must contain only positive integers or
    zero
    - every _centre attribute must contain only positive integers or zero
    - every _centre attribute describes a point that is the exact centre of the
     rectangle (if the exact centre is not an integer, the values in _centre
     should be rounded down to the nearest integer).
    - if _point is not None, then _point[0] <= 2*_centre[0]
    - if _point is not None, then _point[1] <= 2*_centre[1]
    - if d._point is not None for some descendant d of p, then:
    - d must be in the _nw or _sw subtrees if d._point[0] <= p._centre[0] and in
     one of the other subtrees otherwise.
    - d must be in the _nw or _ne subtrees if d._point[1] <= p._centre[1] and in
     one of the other subtrees otherwise.
    """

    _centre: Tuple[int, int]
    _name: Optional[str]
    _point: Optional[Tuple[int, int]]
    _ne: Optional[QuadTree]
    _nw: Optional[QuadTree]
    _se: Optional[QuadTree]
    _sw: Optional[QuadTree]

    def __init__(self, centre: Tuple[int, int]) -> None:
        """Initialize a new QuadTree instance

        Runtime: O(1)
        """
        self._centre = centre
        self._name = None
        self._point = None
        self._ne = None
        self._nw = None
        self._se = None
        self._sw = None

    def __contains__(self, name: str) -> bool:
        """ Return True if a player named <name> is stored in this tree.

        Runtime: O(n)
        """
        if self.is_leaf():
            if self._name == name:
                return True
            return False
        else:
            if self._nw is not None:
                north_w = name in self._nw
                if north_w:
                    return True
            if self._ne is not None:
                north_e = name in self._ne
                if north_e:
                    return True
            if self._sw is not None:
                south_w = name in self._sw
                if south_w:
                    return True
            if self._se is not None:
                south_e = name in self._se
                if south_e:
                    return True
            # if north_w or north_e or south_w or south_e:
            #     return True
        return False

    def contains_point(self, point: Tuple[int, int]) -> bool:
        """ Return True if a player at location <point> is stored in this tree.

        Runtime: O(log(n))
        """
        if self.is_empty():
            return False
        if self.is_leaf():
            if self._point[0] == point[0] and self._point[1] == point[1]:
                return True
            return False
        elif point[0] <= self._centre[0] and point[1] <= self._centre[1]:
            if self._nw.contains_point(point):
                return True
        elif point[0] <= self._centre[0]:
            if self._sw.contains_point(point):
                return True
        elif point[0] >= self._centre[0] and point[1] <= self._centre[1]:
            if self._ne.contains_point(point):
                return True
        elif point[0] >= self._centre[0]:
            if self._se.contains_point(point):
                return True
        return False

    def insert(self, name: str, point: Tuple[int, int]) -> None:
        """Insert a player named <name> into this tree at point <point>.

        Raise an OutOfBoundsError if <point> is out of bounds.

        Runtime: O(log(n))
        """
        if not (point[0] <= 2*self._centre[0] and point[1]
                <= 2*self._centre[1]):
            raise OutOfBoundsError
        if self.contains_point(point):
            raise OutOfBoundsError
        if self.is_empty():
            self._name = name
            self._point = point
        else:
            division = 0
            self._insert_helper(self._centre, division, name, point)

    def _insert_helper(self, radius, division, name, point):
        curr_radius = (radius[0] / 2**division, radius[1] / 2**division)
        if self._name is None:
            if point[0] <= self._centre[0] and point[1] <= self._centre[1]:
                if self._nw is None:
                    nw_tree = QuadTree((int(self._centre[0] - curr_radius[0]/2),
                                        int(self._centre[1] - curr_radius[1]/2))
                                       )
                    nw_tree._name = name
                    nw_tree._point = point
                    self._nw = nw_tree
                else:
                    self._nw._insert_helper(radius, division + 1, name, point)
            elif point[0] <= self._centre[0]:
                if self._sw is None:
                    sw_tree = QuadTree((int(self._centre[0] - curr_radius[0]/2),
                                    int(self._centre[1] + curr_radius[1]/2)))
                    sw_tree._name = name
                    sw_tree._point = point
                    self._sw = sw_tree
                else:
                    self._sw._insert_helper(radius, division + 1, name, point)
            elif point[0] >= self._centre[0] and point[1] <= self._centre[1]:
                if self._ne is None:
                    ne_tree = QuadTree(
                        (int(self._centre[0] + curr_radius[0] / 2),
                         int(self._centre[1] - curr_radius[1] / 2))
                        )
                    ne_tree._name = name
                    ne_tree._point = point
                    self._ne = ne_tree
                else:
                    self._ne._insert_helper(radius, division + 1, name, point)
            elif point[0] >= self._centre[0]:
                if self._se is None:
                    se_tree = QuadTree(
                        (int(self._centre[0] + curr_radius[0] / 2),
                         int(self._centre[1] + curr_radius[1] / 2)))
                    se_tree._name = name
                    se_tree._point = point
                    self._se = se_tree
                else:
                    self._se._insert_helper(radius, division + 1, name, point)
        else:
            assert self.is_leaf()
            hold_point = self._point
            hold_name = self._name
            self._name, self._name = None, None
            self._insert_helper(radius, division, hold_name, hold_point)
            self._insert_helper(radius, division, name, point)

    def remove(self, name: str) -> None:
        """ Remove information about a player named <name> from this tree.

        Runtime: O(n)
        """
        if self._name is not None and self._name == name:
            self._point = None
            self._name = None
        if not self.is_empty():
            self._remove_helper(name)

    def _remove_helper(self, name) -> bool:
        if self.is_empty():
            return False
        if self._nw is not None:
            if self._nw.is_leaf():
                if self._nw._name == name:
                    self._nw = None
                    self._collapse()
                    return True
            else:
                if self._nw._remove_helper(name):
                    self._collapse()
                    return True
        if self._ne is not None:
            if self._ne.is_leaf():
                if self._ne._name == name:
                    self._ne = None
                    self._collapse()
                    return True
            else:
                if self._ne._remove_helper(name):
                    self._collapse()
                    return True
        if self._sw is not None:
            if self._sw.is_leaf():
                if self._sw._name == name:
                    self._sw = None
                    self._collapse()
                    return True
            else:
                if self._sw._remove_helper(name):
                    return True
        if self._se is not None:
            if self._se.is_leaf():
                if self._se._name == name:
                    self._se = None
                    self._collapse()
                    return True
            else:
                if self._se._remove_helper(name):
                    self._collapse()
                    return True

    def _collapse(self) -> None:
        trees = []
        if self._nw is not None and self._nw.is_leaf():
            trees.append('nw')
        if self._ne is not None and self._ne.is_leaf():
            trees.append('ne')
        if self._sw is not None and self._sw.is_leaf():
            trees.append('sw')
        if self._se is not None and self._se.is_leaf():
            trees.append('se')
        if len(trees) == 1:
            if trees[0] == 'nw':
                self._name = self._nw._name
                self._point = self._nw._point
                self._nw = None
            elif trees[0] == 'ne':
                self._name = self._ne._name
                self._point = self._ne._point
                self._ne = None
            elif trees[0] == 'sw':
                self._name = self._sw._name
                self._point = self._sw._point
                self._sw = None
            elif trees[0] == 'se':
                self._name = self._se._name
                self._point = self._se._point
                self._se = None

    def remove_point(self, point: Tuple[int, int]) -> None:
        """ Remove information about a player at point <point> from this tree.

        Runtime: O(log(n))
        """
        if not self.contains_point(point):
            return None
        if self.is_leaf():
            # leaf and root
            if self._point[0] == point[0] and self._point[1] == point[1]:
                self._name = None
                self._point = None
        else:
            if point[0] <= self._centre[0] and point[1] <= self._centre[1]:
                if self._nw.is_leaf():
                    if self._nw._point == point: # not sure if necessary
                        self._nw = None
                        self._collapse()
        # repeat for all subtrees

    def move(self, name: str, direction: str, steps: int) -> Optional[
        Tuple[int, int]]:
        """ Return the new location of the player named <name> after moving it
        in the given <direction> by <steps> steps.

        Raise an OutOfBoundsError if this would move the player named
        <name> out of bounds (before moving the player).

        Runtime: O(n)

        === precondition ===
        direction in ['N', 'S', 'E', 'W']
        """
        field = self._centre # do we compare to this boundary or self._centre of the parent of <name>
        tree = self._get_player_byname(name, direction, steps)
        if tree:
            x_cord, y_cord = tree[2]
            if 0 <= x_cord <= 2 * field[0] and 0 <= y_cord <= 2 * field[1]:
                new_point = (x_cord, y_cord)
                tree[0]._point = new_point
                if not tree[1]:
                    self.remove(tree[0]._name)
                    self.insert(tree[0]._name, new_point)
                    return new_point
                else:
                    return tree[2]
            else:
                raise OutOfBoundsError

    def _get_player_byname(self, name, direction, steps) -> \
            Optional[Tuple[QuadTree, bool, Tuple[int, int]]]:
        if self._nw is not None:
            if self._nw.is_leaf() and self._nw._name == name:
                p = self._nw._change_coordinates(direction, steps)
                if not p[0] <= self._centre[0] and p[1] <= self._centre[1]:
                    return self._nw, False, p
                else:
                    return self._nw, True, p
            else:
                tree = self._nw._get_player_byname(name, direction, steps)
                if tree:
                    return tree
        if self._ne is not None:
            if self._ne.is_leaf() and self._ne._name == name:
                p = self._ne._change_coordinates(direction, steps)
                if not p[0] > self._centre[0] and p[1] <= self._centre[1]:
                    return self._ne, False, p
                else:
                    return self._ne, True, p
            else:
                tree = self._ne._get_player_byname(name, direction, steps)
                if tree:
                    return tree
        if self._sw is not None:
            if self._sw.is_leaf() and self._sw._name == name:
                p = self._sw._change_coordinates(direction, steps)
                if not p[0] <= self._centre[0] and p[1] > self._centre[1]:
                    return self._sw, False, p
                else:
                    return self._sw, True, p
            else:
                tree = self._sw._get_player_byname(name, direction, steps)
                if tree:
                    return tree
        if self._se is not None:
            if self._se.is_leaf() and self._se._name == name:
                p = self._se._change_coordinates(direction, steps)
                if not p[0] > self._centre[0] and p[1] > self._centre[1]:
                    return self._se, False, p
                else:
                    return self._se, True, p
            else:
                tree = self._se._get_player_byname(name, direction, steps)
                if tree:
                    return tree



    def _change_coordinates(self, direction, steps) -> Tuple[int, int]:
        x_coord = self._point[0]
        y_coord = self._point[1]
        if direction == 'N':
            y_coord = y_coord - steps
        elif direction == 'E':
            x_coord = x_coord + steps
        elif direction == 'S':
            y_coord = y_coord + steps
        elif direction == 'W':
            x_coord = x_coord - steps

        return x_coord, y_coord


    def move_point(self, point: Tuple[int, int], direction: str, steps: int) ->\
            Optional[Tuple[int, int]]:
        """ Return the new location of the player at point <point> after moving it
        in the given <direction> by <steps> steps.

        Raise an OutOfBoundsError if this would move the player at point
        <point> out of bounds (before moving the player).

        Moving a point may require the tree to be reorganized. This method should do
        the minimum amount of tree reorganization possible to move the given point properly.

        Runtime: O(log(n))

        === precondition ===
        direction in ['N', 'S', 'E', 'W']

        """
        field = self._centre
        if self.contains_point(point):
            if self._point == point:
                p = self._change_coordinates(direction, steps)
                self._point = p
                return p
            else:
                tree = self._movepoint_helper(point, direction, steps)
                if tree:
                    x_cord, y_cord = tree[2]
                    if 0 <= x_cord <= 2 * field[0] and 0 <= y_cord <= 2 * field[
                        1]:
                        new_point = (x_cord, y_cord)
                        tree[0]._point = new_point
                        if not tree[1]:
                            self.remove(tree[0]._name)
                            self.insert(tree[0]._name, new_point)
                            return new_point
                        else:
                            return tree[2]
                    else:
                        raise OutOfBoundsError

    def _movepoint_helper(self, point, direction, steps):
        if point[0] <= self._centre[0] and point[1] <= self._centre[1]:
            if self._nw is not None and self._nw.is_leaf() and \
                    self._nw._point == point:
                p = self._nw._change_coordinates(direction, steps)
                if not p[0] <= self._centre[0] and p[1] <= self._centre[1]:
                    return self._nw, False, p
                else:
                    return self._nw, True, p
            else:
                tree = self._nw._movepoint_helper(point, direction, steps)
                if tree:
                    return tree
        elif point[0] > self._centre[0] and point[1] <= self._centre[1]:
            if self._ne is not None and self._ne.is_leaf() and \
                    self._point == point:
                p = self._ne._change_coordinates(direction, steps)
                if not p[0] > self._centre[0] and p[1] <= self._centre[1]:
                    return self._ne, False, p
                else:
                    return self._ne, True, p
            else:
                tree = self._ne._movepoint_helper(point, direction, steps)
                if tree:
                    return tree
        elif point[0] <= self._centre[0] and point[1] > self._centre[1]:
            if self._sw is not None and self._se.is_leaf() and self._point == point:
                p = self._sw._change_coordinates(direction, steps)
                if not p[0] <= self._centre[0] and p[1] > self._centre[1]:
                    return self._sw, False, p
                else:
                    return self._sw, True, p
            else:
                tree = self._sw._movepoint_helper(point, direction, steps)
                if tree:
                    return tree
        elif point[0] > self._centre[0] and p[1] > self._centre[1]:
            if self._se is not None and self._se.is_leaf() and \
                    self._point == point:
                p = self._se._change_coordinates(direction, steps)
                if not p[0] > self._centre[0] and p[1] > self._centre[1]:
                    return self._se, False, p
                else:
                    return self._se, True, p
            else:
                tree = self._se._movepoint_helper(point, direction, steps)
                if tree:
                    return tree


    def names_in_range(self, point: Tuple[int, int], direction: str,
                       distance: int) -> List[str]:
        """ Return a list of names of players whose location is in the <direction>
        relative to <point> and whose location is within <distance> along both the x and y axis.

        For example: names_in_range((100, 100), 'SE', 10) should return the names of all
        the players south east of (100, 100) and within 10 steps in either direction.
        In other words, find all players whose location is in the box with corners at:
        (100, 100) (110, 100) (100, 110) (110, 110)

        Runtime: faster than O(n) when distance is small

        === precondition ===
        direction in ['NE', 'SE', 'NE', 'SW']
        """
        # get coordinates
        sc = (point, point)
        if direction == 'NW':
            sc = ((point[0] - distance, point[1] - distance), point)
        elif direction == 'NE':
            sc = ((point[0], point[1] - distance), (point[0] + distance, point[1]))
        elif direction == 'SW':
            sc = ((point[0] - distance, point[1]), (point[0], point[1] + distance))
        elif direction == 'SE':
            sc = (point, (point[0] + distance, point[1] + distance))

        if self.is_leaf() and self._name is not None:
            if sc[0][0] <= self._point[0] <= sc[1][0] and sc[0][1] <= self._point[1] <= sc[1][1]:
                return [self._name]
            else:
                return []
        else:
            names = []
            if self._nw is not None:
                names.extend(self._nw.names_in_range(point, direction,
                                                     distance))
            if self._ne is not None:
                names.extend(self._ne.names_in_range(point, direction,
                                                     distance))
            if self._sw is not None:
                names.extend(self._sw.names_in_range(point, direction,
                                                     distance))
            if self._se is not None:
                names.extend(self._se.names_in_range(point, direction,
                                                     distance))
            return names

    def size(self) -> int:
        """ Return the number of nodes in <self>

        Runtime: O(n)
        """
        # raise NotImplementedError
        if self.is_empty():
            return 0
        else:
            count = 1
            if self._nw is not None:
                count += self._nw.size()
            if self._ne is not None:
                count += self._ne.size()
            if self._sw is not None:
                count += self._sw.size()
            if self._se is not None:
                count += self._se.size()
        return count

    def height(self) -> int:
        """ Return the height of <self>

        Runtime: O(n)
        """
        if self.is_empty():
            return 0
        elif self.is_leaf():
            return 1
        else:
            hght = []
            hght.append(self._nw.height())
            hght.append(self._ne.height())
            hght.append(self._sw.height())
            hght.append(self._se.height())
        return 1 + max(hght)


    def depth(self, tree: Tree) -> Optional[int]:
        """ Return the depth of the subtree <tree> relative to <self>.
        Return None if <tree> is not a descendant of <self>

        Runtime: O(log(n))
        """
        if self.is_empty():
            return None
        if self is tree:
            return None
        else:
            pass

    def _get_depth(self, tree: Tree) -> Optional[int]:
        """ helper function for depth"""
        if self is tree:
            return 0
        elif tree._point[0] <= self._centre[0] and tree._point[1] <= self._centre[1]:
            return 1 + self._nw._get_depth(tree)
        elif tree._point[0] <= self._centre[0]:
            return 1 + self._sw._get_depth(tree)
        elif tree._point[0] >= self._centre[0] and tree._point[1] <= self._centre[1]:
            return 1 + self._ne._get_depth(tree)
        elif tree._point[0] >= self._centre[0]:
            return 1 + self._se._get_depth(tree)


    def is_leaf(self) -> bool:
        """ Return True if <self> has no children

        Runtime: O(1)
        """
        return not (self._nw is not None or self._ne is not None or
                    self._se is not None or self._sw is not None)

    def is_empty(self) -> bool:
        """ Return True if <self> does not store any information about the location
        of any players.

        Runtime: O(1)
        """
        return self.is_leaf() and self._name is None


class TwoDTree(Tree):
    _name: Optional[str]
    _point: Optional[Tuple[int, int]]
    _nw: Optional[Tuple[int, int]]
    _se: Optional[Tuple[int, int]]
    _lt: Optional[TwoDTree]
    _gt: Optional[TwoDTree]
    _split_type: str

    def __init__(self, name: str, point: Tuple[int, int], nw: Tuple[int, int],
                 se: Tuple[int, int]):
        """Initialize a new Tree instance

        Runtime: O(1)
        """
        self._nw = nw
        self._se = se
        self._name = name
        self._point = point
        self._lt = None
        self._gt = None
        self._split_type = 'x'

    def __contains__(self, name: str) -> bool:
        """ Return True if a player named <name> is stored in this tree.

        Runtime: O(n)
        """
        if self._name is None and self._point is None:
            return False
        if self.is_leaf():
            if self._name == name:
                return True
        else:
            if self._name == name:
                return True
            if self._gt is not None:
                if name in self._gt:
                    return True
            if self._lt is not None:
                if name in self._lt:
                    return True
            return False

    def contains_point(self, point: Tuple[int, int]) -> bool:
        """ Return True if a player at location <point> is stored in this tree.

        Runtime: O(log(n))
        """
        if self.is_empty():
            return False
        if self.is_leaf():
            if self._point == point:
                return True
        else:
            if self._point == point:
                return True
            elif self._split_type == 'x':
                if point[0] <= self._point[0]:
                    if self._lt.contains_point(point):
                        return True
                else:
                    if self._gt.contains_point(point):
                        return True

            elif self._split_type == 'y':
                if point[1] <= self._point[1]:
                    if self._lt.contains_point(point):
                        return True
                else:
                    if self._gt.contains_point(point):
                        return True
            return False

    def insert(self, name: str, point: Tuple[int, int]) -> None:
        """Insert a player named <name> into this tree at point <point>.

        Raise an OutOfBoundsError if <point> is out of bounds.

        Runtime: O(log(n))
        """
        pass

    def remove(self, name: str) -> None:
        """ Remove information about a player named <name> from this tree.

        Runtime: O(n)
        """
        pass

    def _get_xpoints_dict(self):
        vals = {}
        if self.is_leaf():
            vals[self] = self._point[0]
        else:
            vals[self] = self._point[0]
            if self._lt is not None:
                vals.update(self._lt._get_xpoints_dict())
            if self._gt is not None:
                vals.update(self._gt._get_xpoints_dict())
        return vals

    def _get_ypoint_dict(self):
        vals = {}
        if self.is_leaf():
            vals[self] = self._point[1]
        else:
            vals[self] = self._point[1]
            if self._lt is not None:
                vals.update(self._lt._get_xpoints_dict())
            if self._gt is not None:
                vals.update(self._gt._get_xpoints_dict())
        return vals


    def _get_promoting_tree(self, size):
        if self._gt is not None:
            if self._split_type == 'x':
                d = self._get_xpoints_dict()
                if size == 'max':
                    return max(d, key=d.get)
                elif size == 'min':
                    return min(d, key=d.get)
            elif self._split_type == 'y':
                d = self._get_ypoint_dict()
                if size == 'max':
                    return max(d, key=d.get)
                elif size == 'min':
                    return min(d, key=d.get)

    def _find_tree_byname(self, name) -> Optional[TwoDTree]:
        if self.is_empty():
            return None
        if self.is_leaf() and self._name == name:
            return self
        else:
            if self._name == name:
                return self
            if self._lt is not None:
                tree = self._lt._find_tree_byname(name)
                if tree:
                    return tree
            if self._gt is not None:
                tree = self._gt._find_tree_byname(name)
                if tree:
                    return tree



    def remove_point(self, point: Tuple[int, int]) -> None:
        """ Remove information about a player at point <point> from this tree.

        Runtime: O(log(n))
        """
        if self.is_empty():
            return None
        if not self.contains_point(point):
            return None
        tree = self._get_tree_bypoint(point)
        if not tree[0].is_leaf() and tree[1] is None:
            if tree[0].is_leaf() and tree[1] is None:
                tree[0]._name, tree[0]._point = None, None
            elif tree[0].is_leaf() and tree[1] is not None:
                if tree[1]._gt is tree[0]:
                    tree[1]._gt = None
                elif tree[1]._lt is tree[0]:
                    tree[1]._lt = None
        else:
            if tree[0]._gt is not None:
                promote = tree[0]._get_promoting_tree('min')
                

    def _get_tree_bypoint(self, point) -> Tuple[TwoDTree, Optional[TwoDTree]]:
        if self.is_leaf() and self._point == point:
            return self, None
        else:
            if self._point == point:
                return self, None
            elif self._split_type == 'x':
                if point[0] <= self._point[0]:
                    tree = self._lt._get_tree_bypoint(point)
                    if tree:
                        return tree[0], self
                else:
                    tree = self._gt._get_tree_bypoint(point)
                    if tree:
                        return tree[0], self
            elif self._split_type == 'y':
                if point[1] <= self._point[1]:
                    tree = self._lt._get_tree_bypoint(point)
                    if tree:
                        return tree[0], self
                else:
                    tree = self._gt._get_tree_bypoint(point)
                    if tree:
                        return tree[0], self




    def move(self, name: str, direction: str, steps: int) -> Optional[
        Tuple[int, int]]:
        """ Return the new location of the player named <name> after moving it
        in the given <direction> by <steps> steps.

        Raise an OutOfBoundsError if this would move the player named
        <name> out of bounds (before moving the player).

        Runtime: O(n)

        === precondition ===
        direction in ['N', 'S', 'E', 'W']
        """
        raise NotImplementedError

    def move_point(self, point: Tuple[int, int], direction: str, steps: int) ->\
            Optional[Tuple[int, int]]:
        """ Return the new location of the player at point <point> after moving it
        in the given <direction> by <steps> steps.

        Raise an OutOfBoundsError if this would move the player at point
        <point> out of bounds (before moving the player).

        Moving a point may require the tree to be reorganized. This method should do
        the minimum amount of tree reorganization possible to move the given point properly.

        Runtime: O(log(n))

        === precondition ===
        direction in ['N', 'S', 'E', 'W']

        """
        raise NotImplementedError

    def names_in_range(self, point: Tuple[int, int], direction: str,
                       distance: int) -> List[str]:
        """ Return a list of names of players whose location is in the <direction>
        relative to <point> and whose location is within <distance> along both the x and y axis.

        For example: names_in_range((100, 100), 'SE', 10) should return the names of all
        the players south east of (100, 100) and within 10 steps in either direction.
        In other words, find all players whose location is in the box with corners at:
        (100, 100) (110, 100) (100, 110) (110, 110)

        Runtime: faster than O(n) when distance is small

        === precondition ===
        direction in ['NE', 'SE', 'NE', 'SW']
        """
        sc = (point, point)
        if direction == 'NW':
            sc = ((point[0] - distance, point[1] - distance), point)
        elif direction == 'NE':
            sc = (
            (point[0], point[1] - distance), (point[0] + distance, point[1]))
        elif direction == 'SW':
            sc = (
            (point[0] - distance, point[1]), (point[0], point[1] + distance))
        elif direction == 'SE':
            sc = (point, (point[0] + distance, point[1] + distance))

        if self.is_leaf() and self._name is not None:
            if sc[0][0] <= self._point[0] <= sc[1][0] and sc[0][1] <= self._point[1] <= sc[1][1]:
                return [self._name]
            else:
                return []
        else:
            names = []
            if sc[0][0] <= self._point[0] <= sc[1][0] and sc[0][1] <= self._point[1] <= sc[1][1]:
                names.append(self._name)
            if self._lt is not None:
                names.extend(self._lt.names_in_range(point,
                                                     direction, distance))
            if self._gt is not None:
                names.extend(self._gt.names_in_range(point,
                                                     direction, distance))
            return names



    def size(self) -> int:
        """ Return the number of nodes in <self>

        Runtime: O(n)
        """
        if self.is_empty():
            return 0
        if self.is_leaf():
            return 1
        else:
            count = 1
            if self._lt is not None:
                count += self._lt.size()
            if self._gt is not None:
                count += self._gt.size()
            return count

    def height(self) -> int:
        """ Return the height of <self>

        Runtime: O(n)
        """
        if self.is_empty():
            return 0
        if self.is_leaf():
            return 1
        else:
            hght = []
            if self._lt is not None:
                hght.append(self._lt.height())
            if self._gt is not None:
                hght.append(self._gt.height())
            return 1 + max(hght, default=0)

    def depth(self, tree: Tree) -> Optional[int]:
        """ Return the depth of the subtree <tree> relative to <self>.
        Return None if <tree> is not a descendant of <self>

        Runtime: O(log(n))
        """
        if self.is_empty():
            return None
        if self is tree:
            return None


    def _get_depth(self, tree):
        if self.is_leaf():
            if self is tree:
                return 0
        else:
            if self._split_type == 'x':
                if tree._point[0] <= self._point[0]:
                    if self._lt is not None:
                        return 1 + self._lt._get_depth(tree)
                else:
                    if self._gt is not None:
                        return 1 + self._gt._get_depth(tree)
            elif self._split_type == 'y':
                if tree._point[1] <= self._point[1]:
                    if self._gt is not None:
                        return 1 + self._lt._get_depth(tree)
                else:
                    if self._gt is not None:
                        return 1 + self._gt._get_depth(tree)


    def is_leaf(self) -> bool:
        """ Return True if <self> has no children

        Runtime: O(1)
        """
        return self._lt is None and self._gt is None

    def is_empty(self) -> bool:
        """ Return True if <self> does not store any information about the location
        of any players.

        Runtime: O(1)
        """
        return self.is_leaf() and self._name is None

    def balance(self) -> None:
        """ Balance <self> so that there is at most a difference of 1 between the
        size of the _lt subtree and the size of the _gt subtree for all trees in
        <self>.
        """
        pass


if __name__ == '__main__':
    import python_ta

    python_ta.check_all(config={'extra-imports': ['typing']})
