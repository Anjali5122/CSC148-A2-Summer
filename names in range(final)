class Quadtree:
    def names_in_range(self, point: Tuple[int, int], direction: str,
                       distance: int) -> List[str]:
        """ Return a list of names of players whose location is in the <direction>
        relative to <point> and whose location is within <distance> along both the x and y axis.

        For example: names_in_range((100, 100), 'SE', 10) should return the names of all
        the players south east of (100, 100) and within 10 steps in either direction.
        In other words, find all players whose location is in the box with corners at:
        (100, 100) (110, 100) (100, 110) (110, 110)

        Runtime: faster than O(n) when distance is small

        === precondition ===
        direction in ['NE', 'SE', 'NE', 'SW']

        >>> p = QuadTree((100, 100))
        >>> p._ne = QuadTree((150, 50))
        >>> p._ne._point = (125, 75)
        >>> p._ne._name = "Anjali"
        >>> p.names_in_range((100, 100), 'NE', 50)
        ['Anjali']
        >>> s = QuadTree((100, 100))
        >>> s._ne = QuadTree((150, 50))
        >>> s._ne._point = (110, 90)
        >>> s._ne._name = "p1"
        >>> s._nw = QuadTree((50, 50))
        >>> s._nw._point = (50, 50)
        >>> s._nw._name = 'p3'
        >>> s.names_in_range((110, 90), 'NE', 30)
        ['p1']
        >>> m = QuadTree((100, 100))
        >>> m._ne = QuadTree((150, 50))
        >>> m._ne._point = (99, 99)
        >>> m._ne._name = "p1"
        >>> m._nw = QuadTree((50, 50))
        >>> m._nw._point = (50, 50)
        >>> m._nw._name = 'p3'
        >>> m.names_in_range((0, 100), 'NE', 100)
        ['p1', 'p3']
        """
        if self.is_empty():
            return []
        if self.is_leaf():
            new = []
            new_x, new_y = self._make_range(point, direction, distance)
            lower_x = min(point[0], new_x)
            upper_x = max(point[0], new_x)
            lower_y = min(point[1], new_y)
            upper_y = max((point[1], new_y))

            # if direction == 'NE':
            #     if (point[0] <= self._point[0] <= new_x) and \
            #             (new_y <= self._point[1] <= point[1]):
            #         new.append(self._name)
            # if direction == "NW":
            #     if new_x <= self._point[0] <= point[0] and \
            #             (new_y <= self._point[1] <= point[1]):
            #         new.append(self._name)
            # if direction == 'SW':
            #     if new_x <= self._point[0] <= point[0] and \
            #             (point[1] <= self._point[1] <= new_y):
            #         new.append(self._name)
            # if direction == 'SE':
            #     if point[0] <= self._point[0] <= new_x and \
            #             (point[1] <= self._point[1] <= new_y):
            #         new.append(self._name)
            if lower_x <= self._point[0] <= upper_x and lower_y <= self._point[1] <= upper_y:
                new.append(self._name)
            return new
        else:
            new = []

            new_x, new_y = self._make_range(point, direction, distance)
            lower_x = min(point[0], new_x)
            upper_x = max(point[0], new_x)
            lower_y = min(point[1], new_y)
            upper_y = max((point[1], new_y))

            if self._ne is not None and self._centre[0] <= upper_x and lower_y <= self._centre[1]:
                new.extend(self._ne.names_in_range(point, direction, distance))
            if self._nw is not None and lower_x <= self._centre[0] and lower_y <= self._centre[1]:
                new.extend(self._nw.names_in_range(point, direction, distance))
            if self._sw is not None and lower_x < self._centre[0] and upper_y > self._centre[1]:
                    new.extend(self._sw.names_in_range(point, direction, distance))
            if self._se is not None and upper_x > self._centre[0] and upper_y > self._centre[1]:
                    new.extend(self._se.names_in_range(point, direction, distance))
            return new
            
class TwoDTree:
        def names_in_range(self, point: Tuple[int, int], direction: str,
                       distance: int) -> List[str]:
        """ Return a list of names of players whose location is in the <direction>
        relative to <point> and whose location is within <distance> along both the x and y axis.

        For example: names_in_range((100, 100), 'SE', 10) should return the names of all
        the players south east of (100, 100) and within 10 steps in either direction.
        In other words, find all players whose location is in the box with corners at:
        (100, 100) (110, 100) (100, 110) (110, 110)

        Runtime: faster than O(n) when distance is small

        === precondition ===
        direction in ['NE', 'SE', 'NE', 'SW']

        >>> p = TwoDTree((0,0), (200,200))
        >>> p._point = (100, 100)
        >>> p._name = 'p1'
        >>> p._lt = TwoDTree(None, None)
        >>> p._lt._point = (50, 100)
        >>> p._lt._name = 'p2'
        >>> p._lt._split_type = 'y'
        >>> p._gt = TwoDTree(None, None)
        >>> p._gt._point = (150, 150)
        >>> p._gt._name = 'p3'
        >>> p._gt._split_type = 'y'
        >>> p.names_in_range((30, 150), 'NE', 50)
        ['p2']
        >>> p.names_in_range((30, 150), 'NE', 20)
        []
        >>> p.names_in_range((30, 150), 'NE', 120)
        ['p1', 'p2', 'p3']
        """

        if self.is_empty():
            return []
        if self.is_leaf():
            new_x, new_y = self._make_range(point, direction, distance)
            lower_x = min(point[0], new_x)
            upper_x = max(point[0], new_x)
            lower_y = min(point[1], new_y)
            upper_y = max((point[1], new_y))
            if lower_x <= self._point[0] <= upper_x and lower_y <= self._point[1] <= upper_y:
                return [self._name]
            else:
                return []
        else:
            new = []
            new_x, new_y = self._make_range(point, direction, distance)
            lower_x = min(point[0], new_x)
            upper_x = max(point[0], new_x)
            lower_y = min(point[1], new_y)
            upper_y = max((point[1], new_y))
            if lower_x <= self._point[0] <= upper_x and lower_y <= self._point[1] <= upper_y:
                new.append(self._name)

            if self._split_type == 'x':
                if lower_x <= self._point[0]:
                    if self._lt is not None:
                        new.extend(
                            self._lt.names_in_range(point, direction, distance))
                if upper_x > self._point[0]:
                    if self._gt is not None:
                        new.extend(
                            self._gt.names_in_range(point, direction, distance))
            else:
                if lower_y <= self._point[1]:
                    if self._lt is not None:
                        new.extend(
                            self._lt.names_in_range(point, direction, distance))
                if upper_y > self._point[1]:
                    if self._gt is not None:
                        new.extend(
                            self._gt.names_in_range(point, direction, distance))
            return new
